# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  backend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

# This is a Lambda function config associated with the source code: get-all-items.js
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, GET, PUT, DELETE, OPTIONS'"
        AllowHeaders: "'X-Forwarded-For'"
        AllowOrigin: "*"
        MaxAge: "'600'"

# Handling options preflight for CORS
# Retrieves all articles
  getAllArticlesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/article/get-all-items/handler.getAllItemsHandler
      Runtime: python3.7 
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Content
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref Content
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /article
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getArticleByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/article/get-by-id/handler.getByIdHandler
      Runtime: python3.7 
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Content
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref Content
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /article/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/article/put-item/handler.putItemHandler
      Runtime: python3.7 
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Content
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref Content
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /article
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable
  getAllVideosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/video/get-all-items/handler.getAllItemsHandler
      Runtime: python3.7 
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP version '3.8'
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Content
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref Content
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /video
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getVideoByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/video/get-by-id.getByIdHandler
      Runtime: python3.7 
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Content
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref Content
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /video/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putVideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/video/put-item.putItemHandler
      Runtime: python3.7 
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Content
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref Content
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /video
            Method: POST
  # Simple s
  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  Content:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Content
      AttributeDefinitions:
        - 
          AttributeName: "PK"
          AttributeType: "S"
        - 
          AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "PK"
          KeyType: "HASH"
        -
          AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      

        

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
